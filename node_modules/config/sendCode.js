/**
 * Created by Sven on 7/5/2016.
 */
/* PATH: host_url:8080/sendCode
 *
 * INPUT:
 * 'phone_number'
 *
 * OUTPUT:
 *  JSON Object that contains
 *  'code' : respond code
 *  'msg' : respond message
 *  'object_id' : upon successful send code and register phone in database(only for debug purposes)
 *
 *
 *  1 -> Successfully register phone in database
 * -1 -> Fail to send validation code to the user
 * -6 -> Incorrect phone_number format
 * -7 -> Required field not set
 */
var config = require('./config');
var twilio = require('twilio');
var client = new twilio.RestClient(config.accountSid, config.authToken);
var mongoose = require('mongoose');
var models = require('config/models');

var objectid = '';
var phone_number = '';

exports.sendCode = function(pn,area_code,callback) {
    phone_number = pn;
    if (!phone_number || !area_code) {
        console.log('pm is '+ phone_number);
        console.log('ac is '+ area_code);
        callback({
            'code': "-7",
            'msg': "Required field not set"
        });
        return;
    }

    if (phone_number.trim().length == 0 || phone_number.trim().length != 10 || !/^\d+$/.test(phone_number)) {
        callback({
            'code': "-6",
            'msg': "Incorrect phone_number format"
        });
        return;
    }

    var code = Math.floor(1000 + Math.random() * 9000);

    models.User.find({phone_number: phone_number},function(err,users){
        if(users.length == 0){

            console.log('This is a new user!');
            console.log('pm is '+ phone_number);

            var newUser = new models.User ({
                token: '',
                phone_number: phone_number,
                code: code,
                vertify_flag: 'false',
                hashed_password: '',
                email: '',
                first_name: '',
                last_name: '',
                salt: '',
                temp_str: '',
                has_avatar: 0
            });

            newUser.save(function(error){
                console.log('registered in database');
                models.User.find({phone_number: phone_number},function(err,users){
                    objectid = users[0]._id;
                })
                console.log('the user object_id is ' + objectid);
            })
        }else{
            objectid = users[0]._id;
            console.log('id is '+ objectid);
            console.log('This is a returning user!');
            models.User.findByIdAndUpdate(objectid, {$set: {code: code}},function(err, result){
                if(err){
                    console.log(err);
                }
                console.log("RESULT: " + result);
            });
            console.log('the user object_id is ' + objectid);
        }
    })

    client.sendSms({
        to: area_code + phone_number,
        from: config.twilioNumber,
        body: '[V-GO Group] Your verification code for validation is ' + code +' .'
    }, function (error, message) {
        // The HTTP request to Twilio will run asynchronously. This callback
        // function will be called when a response is received from Twilio
        // The "error" variable will contain error information, if any.
        // If the request was successful, this value will be "falsy"
        if (!error) {
            console.log('Success! The SID for this SMS message is:');
            console.log(message.sid);

            console.log('Message sent to:');
            console.log(phone_number);

            console.log('Message sent on:');
            console.log(message.dateCreated);

            callback({
                'code': "1",
                'msg': "Successfully register phone in database, the objectid is "+ objectid
            });
            return;
        } else {
            console.log('Oops! There was an error.');
            console.log(error);
            callback({
                'code': "-1",
                'msg': "fail to send validation code to the user~"
            });
        }
    })
}